<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd

                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 自动扫描(自动注入)，扫描me.gacl.service这个包以及它的子包的所有使用@Service注解标注的类 -->
	<!-- <context:component-scan base-package="ec.com.service" /> -->
	<!-- 自动扫描(自动注入)，扫描me.gacl.service这个包以及它的子包的所有使用@Service注解标注的类 -->
	<!-- <context:component-scan base-package="ecloud.com.base.dao" /> -->
	<context:component-scan base-package="ecloud.com.service" />
<!-- 	<context:component-scan base-package="ecloud.com.base.service" /> -->
	<context:component-scan base-package="ecloud.com.base.aop" />
	<context:component-scan base-package="ecloud.com.base.shiro.service" />
	<!--使用<context:annotation- >隐式地向 Spring容器注册 processor
	该配置项其实也包含了自动注入上述processor的功能，因此当使用<context:component-scan/>后，即可将<context:annotation->省去。 -->
<!-- 	 xml中bean没有注入属性，在java类中用注解注入属性时，需使用context:annotation-config注解
 配置context:component-scan后，可省略该配置-->
	<context:annotation-config />
	<!-- 自动代理，默认jdk -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>
	<!-- 引入ehcache缓存 -->
	<import resource="classpath:spring/spring-ehcache.xml" />
	<!-- 引入redis缓存配置 -->
	<import resource="classpath:spring/spring-redis.xml" />
	<!-- redisCacheManager配置 -->
	<!--<import resource="classpath:spring/spring-redis-cache.xml" />-->
	<import resource="classpath:spring/spring-activemq.xml" />

	<import resource="classpath:spring/spring-shiro-web.xml" />
	<!-- 配置一个缓存拦截器对象，处理具体的缓存业务 -->
	<!-- 使用二级缓存时，将下面的配置注释 -->
	<bean id="methodCacheInterceptor" class="ecloud.com.base.Interceptor.MethodCacheInterceptor">
		<property name="cache" ref="myCache" />
	</bean>
	<!-- 参与缓存的切入点对象 (切入点对象，确定何时何地调用拦截器) 也可用<aop:config>配置 -->
<!-- 	<bean id="methodCachePointCut" -->
<!-- 		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"> -->
		<!-- 配置缓存aop切面 -->
<!-- 		<property name="advice" ref="methodCacheInterceptor" /> -->
		<!-- 配置哪些方法参与缓存策略 .表示符合任何单一字元 ### +表示符合前一个字元一次或多次 ### *表示符合前一个字元零次或多次 ### 
			\Escape任何Regular expression使用到的符号 .*表示前面的前缀(包括包 名) 表示print方法 -->
<!-- 		<property name="patterns"> -->
<!-- 			<list> -->
<!-- 				<value>ecloud.com.service.*Service*\.*get.*</value> -->
<!-- 				<value>ecloud.com.service.*Service*\.*search.*</value> -->
<!-- 				<value>ecloud.com.service.*Service*\.*query.*</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<!-- flush cache 拦截器 -->
	<bean id="methodCacheAfterAdvice" class="ecloud.com.base.Interceptor.MethodCacheAfterAdvice">
		<property name="cache" ref="myCache" />
	</bean>
	<!-- aop实现拦截器，打印方法的参数名和参数值 -->
	<bean id="systemMethodInterceptor" class="ecloud.com.base.Interceptor.BaseMethodInterceptor" />
	<aop:config>
		<!--切入点 -->
		<aop:pointcut id="methodPoint2" expression="execution(public * ecloud.com.service..*.query*(..)) or execution(public * ecloud.com.base.service..*.query*(..)) " />
		<aop:pointcut id="methodPoint" expression="execution(public * ecloud.com.service..*.*(..)) or execution(public * ecloud.com.base.service..*.query*(..)) "/>
		<aop:pointcut id="methodPoint3" expression="execution(public * ecloud.com.service..*.query*(..)) or execution(public * ecloud.com.base.service..*.query*(..)) " />
		
		<aop:advisor pointcut-ref="methodPoint" advice-ref="systemMethodInterceptor" />
<!-- 		此方法获取不到target，只能获取到接口class，通过注解形式可获取到具体实现的service -->
<!-- 		<aop:advisor pointcut-ref="methodPoint3" advice-ref="methodCacheInterceptor" />  -->
		<aop:advisor pointcut-ref="methodPoint2" advice-ref="methodCacheAfterAdvice" />
		
<!-- 		<aop:aspect id="aspect" ref="methodCacheAfterAdvice">  -->
<!-- 		 <aop:after-returning method="afterReturning" pointcut-ref="methodPoint2"/>   -->
<!-- 		 </aop:aspect> -->
	</aop:config>
</beans>